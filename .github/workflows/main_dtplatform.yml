# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions
name: Build and deploy Python Flask app to Azure Web App

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch
  workflow_dispatch:  # Allows for manual triggering from GitHub Actions UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Python version (use the version that is compatible with your app)
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step 3: Install dependencies (ensure requirements.txt is in your project)
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      # Step 4: Run tests (Optional - you can add your test steps here)
      # - name: Run tests
      #   run: pytest

      # Step 5: Zip the application (this will be uploaded to Azure)
      - name: Zip application files
        run: |
          zip -r app.zip ./* -x venv/*

      # Step 6: Upload artifact for deployment job
      - uses: actions/upload-artifact@v4
        with:
          name: flask-app
          path: app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write  # This is required for requesting the JWT token

    steps:
      # Step 1: Download the artifact (app.zip) from the build job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: flask-app

      # Step 2: Unzip the artifact
      - name: Unzip application
        run: |
          unzip app.zip -d app

      # Step 3: Login to Azure using GitHub Secrets
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_1FF1A6472A9E4DBAB14BCC4539D84852 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_4387A04169314FF9AB42AE2611928219 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_68398AA7F2B740B5A7AE1DC4229E59EDÂ }}

      # Step 4: Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'dtplatform'  # Replace with your Azure Web App name
          slot-name: 'Production'  # Optional: If you're using slots (staging, production)
          package: './app'  # Path to the unzipped application directory
